@precedence {
  else @left,
  member,
  call,
  prefix,
  postfix,
  typeof,
  exp @left,
  times @left,
  plus @left,
  shift @left,
  loop,
  rel @left,
  equal @left,
  bitOr @left,
  bitXor @left,
  bitAnd @left,
  and @left,
  or @left,
  ternary @left,
  assign @left,
  comma @left,
  statement @cut
}

@top Script { declaration+ }

statement {
  ForStatement { kw<"for"> ckw<"each">? (ForSpec | ForInSpec) statement } |
  WhileStatement { kw<"while"> ParenthesizedExpression statement } |
  WithStatement { kw<"with"> ParenthesizedExpression statement } |
  DoStatement { kw<"do"> statement kw<"while"> ParenthesizedExpression semi } |
  IfStatement { kw<"if"> ParenthesizedExpression statement (!else kw<"else"> statement)? } |
  SwitchStatement { kw<"switch"> ParenthesizedExpression SwitchBody { "{" switchItem* "}" } } |
  TryStatement { kw<"try"> Block (kw<"catch"> ("(" VariableDefinition TypeAnnotation? ")")? Block)? (kw<"finally"> Block)? } |
  ReturnStatement { kw<"return"> (noSemi expression)? semi } |
  ThrowStatement { kw<"throw"> expression semi } |
  BreakStatement { kw<"break"> (noSemi Label)? semi } |
  ContinueStatement { kw<"continue"> (noSemi Label)? semi } |
  DebuggerStatement { kw<"debugger"> semi } |
  Block |
  LabeledStatement { Label ":" statement } |
  VariableDeclaration |
  ExpressionStatement { expression semi } |
  ";"
}

ImportDeclaration {
  kw<"import"> ImportName { identifier ("." (identifier | "*"))* } semi
}

ForSpec {
  "("
  (VariableDeclaration | expression ";" | ";") expression? ";" expression?
  ")"
}

forXSpec<op> {
  "("
  (kw<"var"> VariableDefinition | VariableName | MemberExpression)
  !loop op expression
  ")"
}

ForInSpec { forXSpec<kw<"in">> }

declaration {
  PackageDeclaration |
  ImportDeclaration |
  FunctionDeclaration |
  ClassDeclaration |
  VariableDeclaration |
  InterfaceDeclaration
}

FunctionDeclaration {
  access? kw<"function"> VariableDefinition? functionSignature Block
}

ExtendsClause {
  kw<"extends"> Type
}

ImplementsClause {
  kw<"implements"> commaSep1<Type>
}

ClassDeclaration {
  access? (kw<"final">|kw<"dynamic">)* kw<"class"> VariableDefinition
  ExtendsClause?
  ImplementsClause?
  ClassBody
}

ClassBody {
  "{" (ClassInitializer | MethodDeclaration | PropertyDeclaration | ";")* "}"
}

access {
  kw<"public"> | kw<"private"> | kw<"protected">
}

ClassInitializer {
  Block
}

MethodDeclaration {
  (ckw<"override">)?
  access?
  (ckw<"static">)?
  kw<"function">
  (ckw<"get"> | ckw<"set">)?
  PropertyNameDefinition
  functionSignature
  (Block | ";")
}

PropertyDeclaration {
  access?
  (ckw<"static">)?
  (kw<"var">|kw<"const">)
  PropertyNameDefinition
  TypeAnnotation?
  ("=" expressionNoComma)?
  semi
}

VariableDeclaration {
  kw<"var"> commaSep1<VariableBinding> semi
}

InterfaceDeclaration {
  access? kw<"interface"> TypeDefinition ExtendsClause? ClassBody
}

PackageDeclaration {
  kw<"package"> PackageName { (identifier ("." identifier)*)? } DeclarationBlock
}

TypeAnnotation { ":" Type }

VariableBinding {
  VariableDefinition TypeAnnotation? ("=" expressionNoComma)?
}

ParamList {
  "(" commaSep<"..."? VariableBinding> ")"
}

Block {
  !statement "{" statement* "}"
}

DeclarationBlock {
  "{" declaration* "}"
}

switchItem {
  CaseLabel { kw<"case"> expression ":" } |
  DefaultLabel { kw<"default"> ":" } |
  statement
}

expression {
  expressionNoComma | SequenceExpression
}

SequenceExpression {
  expressionNoComma !comma ("," expressionNoComma)+
}

expressionNoComma {
  Number |
  String |
  VariableName |
  boolean |
  kw<"this"> |
  kw<"null"> |
  kw<"super"> |
  RegExp |
  ArrayExpression |
  ObjectExpression { "{" commaSep<Property> "}" } |
  NewExpression { kw<"new"> Type ArgList } |
  UnaryExpression |
  ParenthesizedExpression |
  FunctionExpression |
  MemberExpression |
  BinaryExpression |
  ConditionalExpression { expressionNoComma !ternary questionOp expressionNoComma LogicOp<":"> expressionNoComma } |
  AssignmentExpression |
  PostfixExpression { expressionNoComma !postfix (incdec | LogicOp<"!">) } |
  CallExpression { expressionNoComma !call ArgList }
}

ParenthesizedExpression { "(" expression ")" }

ArrayExpression {
  "[" commaSep1<"..."? expressionNoComma | ""> "]"
}

propName { PropertyNameDefinition | "[" expression "]" | Number | String }

Property {
  (ckw<"get"> | ckw<"set">)? propName functionSignature Block |
  propName (":" expressionNoComma)? |
  "..." expressionNoComma
}

functionSignature { ParamList TypeAnnotation? }

FunctionExpression {
  kw<"function"> VariableDefinition? functionSignature Block
}

UnaryExpression {
  !prefix (kw<"void"> | kw<"typeof"> | kw<"delete"> |
           LogicOp<"!"> | BitOp<"~"> | incdec | incdecPrefix | ArithOp<"+" | "-">)
  expressionNoComma
}

BinaryExpression {
  expressionNoComma !exp ArithOp<"**"> expressionNoComma |
  expressionNoComma !times (divide | ArithOp<"%"> | ArithOp<"*">) expressionNoComma |
  expressionNoComma !plus ArithOp<"+" | "-"> expressionNoComma |
  expressionNoComma !shift BitOp<">>" ">"? | "<<"> expressionNoComma |
  expressionNoComma !rel (LessThan | CompareOp<"<=" | ">" "="?> | kw<"in"> | kw<"is">) expressionNoComma |
  expressionNoComma !rel ckw<"as"> Type |
  expressionNoComma !equal CompareOp<"==" "="? | "!=" "="?> expressionNoComma |
  expressionNoComma !bitOr BitOp { "|" } expressionNoComma |
  expressionNoComma !bitXor BitOp<"^"> expressionNoComma |
  expressionNoComma !bitAnd BitOp { "&" } expressionNoComma |
  expressionNoComma !and LogicOp<"&&"> expressionNoComma |
  expressionNoComma !or LogicOp<"||" | "??"> expressionNoComma
}

AssignmentExpression {
  (VariableName | MemberExpression) !assign UpdateOp<($[+\-/%^] | "*" "*"? | "|" "|"? | "&" "&"? | "<<" | ">>" ">"? | "??") "=">
    expressionNoComma |
  (VariableName | MemberExpression) !assign "=" expressionNoComma
}

MemberExpression {
  expressionNoComma !member (("." | "?." | ".@") PropertyName | "[" expression "]")
}

ArgList {
  "(" commaSep<"..."? expressionNoComma> ")"
}

Type {
  kw<"void"> |
  "*" |
  VectorType { ckw<"Vector"> "." "<" Type ">" } |
  TypeName
}

commaSep<content> {
  "" | content ("," content?)*
}

commaSep1<content> {
  content ("," content)*
}

// Keywords

kw<term> { @specialize[name={term}]<identifier, term> }

// Contextual keywords

ckw<term> { @extend[name={term}]<identifier, term> }

semi { ";" | insertSemi }

boolean { @specialize[name=BooleanLiteral]<identifier, "true" | "false"> }

VariableName { identifier ~arrow }

VariableDefinition { identifier ~arrow }

TypeDefinition { identifier }

TypeName { identifier ~arrow }

Label { identifier }

PropertyName { identifier }

PropertyNameDefinition { identifier }

questionOp[name=LogicOp] { "?" }

@skip { whitespace | LineComment | BlockComment }

@external tokens noSemicolon from "./tokens" { noSemi }

@external tokens incdecToken from "./tokens" {
 incdec[name=ArithOp],
 incdecPrefix[name=ArithOp]
}

@tokens {
  whitespace { std.whitespace+ }

  LineComment { "//" ![\n]* }

  BlockComment { "/*" blockCommentRest }

  blockCommentRest { ![*] blockCommentRest | "*" blockCommentAfterStar }

  blockCommentAfterStar { "/" | "*" blockCommentAfterStar | ![/*] blockCommentRest }

  divide[name=ArithOp] { "/" }

  @precedence { BlockComment, LineComment, divide }

  @precedence { BlockComment, LineComment, RegExp }

  identifierChar { std.asciiLetter | $[_$\u{a1}-\u{10ffff}] }

  identifier { identifierChar (identifierChar | std.digit)* }

  @precedence { identifier, whitespace }

  Number {
    (std.digit ("_" | std.digit)* ("." ("_" | std.digit)*)? | "." std.digit ("_" | std.digit)*)
      (("e" | "E") ("+" | "-")? ("_" | std.digit)+)? |
    std.digit ("_" | std.digit)* "n" |
    "0x" (std.digit | $[a-fA-F] | "_")+ |
    "0b" $[01_]+ |
    "0o" $[0-7_]+
  }
  

  String {
    '"' (![\\\n"] | "\\" _)* '"'? |
    "'" (![\\\n'] | "\\" _)* "'"?
  }

  ArithOp<expr> { expr }
  LogicOp<expr> { expr }
  BitOp<expr> { expr }
  CompareOp<expr> { expr }
  UpdateOp<expr> { expr }

  RegExp { "/" (![/\\\n[] | "\\" ![\n] | "[" (![\n\\\]] | "\\" ![\n])* "]")+ ("/" $[gimsuy]*)? }

  LessThan[name=CompareOp] { "<" }

  "="[name=Equals]
  "..."[name=Spread]
  "=>"[name=Arrow]

  "(" ")" "[" "]" "{" "}"

  "?." "." "," ";" ":"
}

@external tokens insertSemicolon from "./tokens" { insertSemi }

@detectDelim